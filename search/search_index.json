{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pybmpmon","text":"<p>BGP Monitoring Protocol (BMP) listener and analyzer</p> <p>pybmpmon is a high-performance BMP listener that receives BGP route data from routers, processes it, and stores it in PostgreSQL/TimescaleDB for analysis. It's designed to handle high-throughput BGP route updates with support for multiple address families.</p>"},{"location":"#overview","title":"Overview","text":"<p>BMP (BGP Monitoring Protocol, RFC 7854) is a protocol that allows network devices to monitor BGP sessions. Routers send BMP messages to monitoring stations, providing visibility into BGP routing decisions, peer relationships, and route updates.</p> <p>pybmpmon acts as a BMP monitoring station, receiving and processing these messages to provide:</p> <ul> <li>Real-time BGP route monitoring: Track route announcements and withdrawals</li> <li>Historical route analysis: Query route changes over time with 5-year retention</li> <li>Multi-protocol support: IPv4 unicast, IPv6 unicast, and EVPN routes</li> <li>Peer relationship tracking: Monitor BMP peer sessions and BGP peering</li> <li>Route churn analysis: Identify unstable routes and routing issues</li> <li>Structured logging: JSON logs for easy integration with log aggregation systems</li> <li>Error tracking: Optional Sentry integration for monitoring and alerting</li> </ul>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#protocol-support","title":"Protocol Support","text":"<ul> <li>BMP v3 (RFC 7854): Full compliance with all message types<ul> <li>Route Monitoring messages</li> <li>Peer Up/Down notifications</li> <li>Statistics Reports</li> <li>Initiation and Termination messages</li> </ul> </li> <li>BGP-4: Parse UPDATE messages with all standard path attributes</li> <li>Address Families:<ul> <li>IPv4 Unicast (AFI=1, SAFI=1)</li> <li>IPv6 Unicast (AFI=2, SAFI=1)</li> <li>EVPN (AFI=25, SAFI=70) - All route types</li> </ul> </li> </ul>"},{"location":"#performance","title":"Performance","text":"<ul> <li>High throughput: 15,000-20,000 routes/second</li> <li>Fast initial load: Process 1.1M route table in ~60 seconds</li> <li>Efficient storage: Batch inserts using PostgreSQL COPY</li> <li>Asyncio-based: Handle thousands of concurrent BMP peers</li> <li>Low latency: Inline parsing with no queuing overhead</li> </ul>"},{"location":"#data-storage","title":"Data Storage","text":"<ul> <li>TimescaleDB: Time-series database optimized for route data</li> <li>5-year retention: Long-term historical route analysis</li> <li>Automatic compression: Reduce storage costs for older data</li> <li>Denormalized schema: Simple queries without complex joins</li> <li>Rich indexing: Fast lookups by prefix, AS path, peer, and more</li> </ul>"},{"location":"#monitoring-observability","title":"Monitoring &amp; Observability","text":"<ul> <li>Structured JSON logs: All events logged to stdout</li> <li>Per-peer statistics: Route counts, throughput, errors (logged every 10 seconds)</li> <li>DEBUG mode: Hex dumps of BMP messages for troubleshooting</li> <li>Sentry integration: Optional error tracking and alerting</li> <li>Health checks: Simple process and network checks (no HTTP server needed)</li> </ul>"},{"location":"#architecture","title":"Architecture","text":""},{"location":"#design-philosophy","title":"Design Philosophy","text":"<p>Start simple. Add complexity only when needed.</p> <p>pybmpmon is designed as a focused monitoring tool, not a distributed system. The architecture prioritizes simplicity, reliability, and ease of debugging over premature optimization.</p>"},{"location":"#component-interaction","title":"Component Interaction","text":"<pre><code>BMP Peer (Router) \u2192 TCP Socket (port 11019) \u2192 Asyncio Handler\n                                                      \u2193\n                                              BMP Message Parser\n                                                      \u2193\n                                   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                                   \u2193                                     \u2193\n                            State Messages                        Route Messages\n                          (Peer Up/Down,                      (Route Monitoring)\n                           Statistics, etc.)                          \u2193\n                                   \u2193                          BGP UPDATE Parser\n                            Handle Inline                             \u2193\n                                   \u2193                          Batch Accumulator\n                              Database                       (1000 routes/batch)\n                                                                      \u2193\n                                                             PostgreSQL COPY\n                                                                      \u2193\n                                                                 Database\n</code></pre>"},{"location":"#concurrency-model","title":"Concurrency Model","text":"<ul> <li>Asyncio only: All I/O operations use async/await</li> <li>No multiprocessing: BGP parsing is fast enough inline (~50\u03bcs per route)</li> <li>No threading: Asyncio handles thousands of concurrent connections</li> <li>Inline processing: Parse BMP and BGP messages directly in connection handlers</li> <li>Batch accumulation: Collect parsed routes in memory, flush periodically</li> </ul>"},{"location":"#data-flow","title":"Data Flow","text":"<ol> <li>BMP Connection: Router connects to port 11019</li> <li>BMP Parsing: Parse message headers and decode message types</li> <li>State Handling: Process Peer Up/Down, Statistics, etc. immediately</li> <li>Route Parsing: Parse BGP UPDATEs from Route Monitoring messages</li> <li>Batch Accumulation: Collect routes until batch size (1000) or timeout (500ms)</li> <li>Database Write: Bulk insert using PostgreSQL COPY</li> <li>Statistics: Log per-peer metrics every 10 seconds</li> </ol>"},{"location":"#use-cases","title":"Use Cases","text":""},{"location":"#network-operations","title":"Network Operations","text":"<ul> <li>Route visibility: See exactly what routes your BGP peers are advertising</li> <li>Change tracking: Monitor route announcements and withdrawals over time</li> <li>Troubleshooting: Analyze BGP routing issues with historical data</li> <li>Capacity planning: Understand route table growth trends</li> </ul>"},{"location":"#security-compliance","title":"Security &amp; Compliance","text":"<ul> <li>Audit trail: Complete history of BGP route changes</li> <li>Anomaly detection: Identify unexpected route changes</li> <li>Prefix hijacking: Track unauthorized route announcements</li> <li>Route leak detection: Monitor for unintended route propagation</li> </ul>"},{"location":"#research-analysis","title":"Research &amp; Analysis","text":"<ul> <li>BGP behavior studies: Analyze routing patterns and convergence</li> <li>Route churn analysis: Identify unstable prefixes and peers</li> <li>AS path analysis: Study AS-level routing decisions</li> <li>EVPN monitoring: Track MAC/IP bindings in EVPN networks</li> </ul>"},{"location":"#technology-stack","title":"Technology Stack","text":""},{"location":"#core-libraries","title":"Core Libraries","text":"<ul> <li>asyncio: Built-in TCP server and concurrency</li> <li>asyncpg: Fast async PostgreSQL driver with connection pooling</li> <li>Pydantic v2: Type-safe configuration from <code>.env</code> files</li> <li>structlog: Structured JSON logging to stdout</li> <li>sentry-sdk (optional): Error tracking and monitoring</li> </ul>"},{"location":"#database","title":"Database","text":"<ul> <li>PostgreSQL 16: Robust relational database</li> <li>TimescaleDB: Time-series extension for hypertables and compression</li> <li>Connection pooling: 5-10 async connections via asyncpg</li> </ul>"},{"location":"#development-tools","title":"Development Tools","text":"<ul> <li>pytest: Test framework with async support (60% coverage target)</li> <li>black: Code formatting (line length 88)</li> <li>ruff: Fast linting and import sorting</li> <li>mypy: Static type checking (strict mode)</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code># Clone repository\ngit clone https://github.com/DigitalVortexLLC/pybmpmon.git\ncd pybmpmon\n\n# Copy example configuration\ncp .env.example .env\n\n# Edit .env with your settings\nvim .env\n\n# Start services with Docker Compose\ndocker-compose up -d\n\n# View logs\ndocker-compose logs -f pybmpmon\n</code></pre> <p>See Installation for detailed setup instructions.</p>"},{"location":"#configuration","title":"Configuration","text":"<p>pybmpmon is configured entirely via environment variables in a <code>.env</code> file:</p> <pre><code># BMP Listener\nBMP_LISTEN_HOST=0.0.0.0\nBMP_LISTEN_PORT=11019\n\n# Database\nDATABASE_HOST=postgres\nDATABASE_PORT=5432\nDATABASE_NAME=bmpmon\nDATABASE_USER=bmpmon\nDATABASE_PASSWORD=changeme\n\n# Logging\nLOG_LEVEL=INFO  # DEBUG, INFO, WARNING, ERROR\n\n# Sentry (Optional)\nSENTRY_DSN=  # Leave empty to disable\nSENTRY_ENVIRONMENT=production\nSENTRY_TRACES_SAMPLE_RATE=0.1\n</code></pre> <p>See Configuration for all options.</p>"},{"location":"#next-steps","title":"Next Steps","text":"<ul> <li>Installation: Set up pybmpmon with Docker Compose</li> <li>Configuration: Configure BMP listener and database</li> <li>SQL Queries: Example queries for route analysis</li> <li>Logging: Understand structured log output</li> <li>Sentry: Set up error tracking and monitoring</li> <li>Troubleshooting: Common issues and solutions</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python: 3.11, 3.12, or 3.13</li> <li>PostgreSQL: 16+ with TimescaleDB extension</li> <li>Platform: Linux or macOS</li> <li>Docker: Optional but recommended</li> </ul>"},{"location":"#license","title":"License","text":"<p>[Add your license information here]</p>"},{"location":"#contributing","title":"Contributing","text":"<p>[Add contribution guidelines here]</p>"},{"location":"configuration/","title":"Configuration","text":"<p>pybmpmon is configured entirely through environment variables, typically stored in a <code>.env</code> file. This approach ensures consistent configuration across development, staging, and production environments.</p>"},{"location":"configuration/#configuration-file","title":"Configuration File","text":""},{"location":"configuration/#location","title":"Location","text":"<p>The <code>.env</code> file should be placed in the root directory of the project:</p> <pre><code>pybmpmon/\n\u251c\u2500\u2500 .env              # Your configuration\n\u251c\u2500\u2500 .env.example      # Template configuration\n\u251c\u2500\u2500 docker-compose.yml\n\u2514\u2500\u2500 ...\n</code></pre>"},{"location":"configuration/#security","title":"Security","text":"<p>Protect Sensitive Data</p> <p>The <code>.env</code> file contains sensitive information (database passwords, Sentry DSN). Ensure proper permissions:</p> <pre><code>chmod 600 .env\n</code></pre> <p>Never commit <code>.env</code> to version control. Use <code>.env.example</code> as a template.</p>"},{"location":"configuration/#configuration-options","title":"Configuration Options","text":""},{"location":"configuration/#bmp-listener","title":"BMP Listener","text":"<p>Configure the BMP listener TCP server:</p> <pre><code># Host to bind to\nBMP_LISTEN_HOST=0.0.0.0\n\n# Port to listen on\nBMP_LISTEN_PORT=11019\n</code></pre> Variable Default Description <code>BMP_LISTEN_HOST</code> <code>0.0.0.0</code> IP address to bind to. Use <code>0.0.0.0</code> for all interfaces, <code>127.0.0.1</code> for localhost only <code>BMP_LISTEN_PORT</code> <code>11019</code> TCP port for BMP connections. Standard BMP port is 11019 <p>Firewall Configuration</p> <p>Ensure your firewall allows inbound TCP connections from routers to the BMP port.</p>"},{"location":"configuration/#database","title":"Database","text":"<p>Configure PostgreSQL/TimescaleDB connection:</p> <pre><code># Database connection\nDATABASE_HOST=postgres\nDATABASE_PORT=5432\nDATABASE_NAME=bmpmon\nDATABASE_USER=bmpmon\nDATABASE_PASSWORD=changeme\n\n# Optional: Connection pool settings\nDATABASE_POOL_MIN_SIZE=5\nDATABASE_POOL_MAX_SIZE=10\nDATABASE_COMMAND_TIMEOUT=30.0\n</code></pre> Variable Default Description <code>DATABASE_HOST</code> <code>postgres</code> PostgreSQL hostname or IP address <code>DATABASE_PORT</code> <code>5432</code> PostgreSQL port <code>DATABASE_NAME</code> <code>bmpmon</code> Database name <code>DATABASE_USER</code> <code>bmpmon</code> Database user <code>DATABASE_PASSWORD</code> (required) Database password - must be set <code>DATABASE_POOL_MIN_SIZE</code> <code>5</code> Minimum connections in pool <code>DATABASE_POOL_MAX_SIZE</code> <code>10</code> Maximum connections in pool <code>DATABASE_COMMAND_TIMEOUT</code> <code>30.0</code> Query timeout in seconds <p>Required Configuration</p> <p><code>DATABASE_PASSWORD</code> must be set. Application will fail to start if not provided.</p> <p>Automatic Schema Initialization</p> <p>The application automatically detects if the database schema exists on startup. If the database is empty, all migrations are run automatically. No manual schema initialization is required when using an external database.</p>"},{"location":"configuration/#connection-string-format","title":"Connection String Format","text":"<p>Alternatively, use a single connection string:</p> <pre><code>DATABASE_URL=postgresql://bmpmon:changeme@postgres:5432/bmpmon\n</code></pre>"},{"location":"configuration/#logging","title":"Logging","text":"<p>Configure structured logging output:</p> <pre><code># Log level\nLOG_LEVEL=INFO\n</code></pre> Variable Default Description <code>LOG_LEVEL</code> <code>INFO</code> Logging level: <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>"},{"location":"configuration/#log-levels","title":"Log Levels","text":"<ul> <li>DEBUG: Verbose logging with BMP message hex dumps. Use for troubleshooting only.</li> <li>INFO: Standard operational logging with statistics and events.</li> <li>WARNING: Warnings and errors only.</li> <li>ERROR: Errors only.</li> </ul> <p>DEBUG Performance Impact</p> <p>DEBUG level logs every BMP message with hex dump (up to 256 bytes). This significantly increases log volume. Use only for troubleshooting.</p> <p>Example DEBUG output:</p> <pre><code>{\n  \"event\": \"bmp_message_received\",\n  \"level\": \"DEBUG\",\n  \"timestamp\": \"2025-09-30T10:15:30.123456Z\",\n  \"peer\": \"192.0.2.1\",\n  \"version\": 3,\n  \"length\": 256,\n  \"msg_type\": \"ROUTE_MONITORING\",\n  \"data_hex\": \"030000010000000000000000...\",\n  \"total_size\": 256\n}\n</code></pre>"},{"location":"configuration/#sentry-integration","title":"Sentry Integration","text":"<p>Optional error tracking and monitoring with Sentry:</p> <pre><code># Sentry configuration\nSENTRY_DSN=https://examplePublicKey@o0.ingest.sentry.io/0\nSENTRY_ENVIRONMENT=production\nSENTRY_TRACES_SAMPLE_RATE=0.1\n</code></pre> Variable Default Description <code>SENTRY_DSN</code> (empty) Sentry Data Source Name. Leave empty to disable Sentry <code>SENTRY_ENVIRONMENT</code> <code>production</code> Environment name (e.g., <code>development</code>, <code>staging</code>, <code>production</code>) <code>SENTRY_TRACES_SAMPLE_RATE</code> <code>0.1</code> Percentage of transactions to trace (0.0 to 1.0)"},{"location":"configuration/#disabling-sentry","title":"Disabling Sentry","text":"<p>To disable Sentry, leave <code>SENTRY_DSN</code> empty or unset:</p> <pre><code># Sentry disabled\nSENTRY_DSN=\n</code></pre>"},{"location":"configuration/#sentry-setup","title":"Sentry Setup","text":"<ol> <li>Create a Sentry project at sentry.io</li> <li>Copy the DSN from project settings</li> <li>Set <code>SENTRY_DSN</code> in <code>.env</code></li> <li>Restart pybmpmon</li> </ol> <p>See Sentry Integration for detailed configuration.</p>"},{"location":"configuration/#environment-specific-configuration","title":"Environment-Specific Configuration","text":""},{"location":"configuration/#development","title":"Development","text":"<p>Recommended settings for development:</p> <pre><code># .env.development\nBMP_LISTEN_HOST=127.0.0.1\nBMP_LISTEN_PORT=11019\n\nDATABASE_HOST=localhost\nDATABASE_PORT=5432\nDATABASE_NAME=bmpmon_dev\nDATABASE_USER=bmpmon\nDATABASE_PASSWORD=dev_password\n\nLOG_LEVEL=DEBUG\n\nSENTRY_DSN=\n</code></pre>"},{"location":"configuration/#staging","title":"Staging","text":"<p>Recommended settings for staging:</p> <pre><code># .env.staging\nBMP_LISTEN_HOST=0.0.0.0\nBMP_LISTEN_PORT=11019\n\nDATABASE_HOST=postgres-staging\nDATABASE_PORT=5432\nDATABASE_NAME=bmpmon\nDATABASE_USER=bmpmon\nDATABASE_PASSWORD=staging_password\n\nLOG_LEVEL=INFO\n\nSENTRY_DSN=https://key@sentry.io/staging-project\nSENTRY_ENVIRONMENT=staging\nSENTRY_TRACES_SAMPLE_RATE=0.5\n</code></pre>"},{"location":"configuration/#production","title":"Production","text":"<p>Recommended settings for production:</p> <pre><code># .env.production\nBMP_LISTEN_HOST=0.0.0.0\nBMP_LISTEN_PORT=11019\n\nDATABASE_HOST=postgres-prod\nDATABASE_PORT=5432\nDATABASE_NAME=bmpmon\nDATABASE_USER=bmpmon\nDATABASE_PASSWORD=strong_random_password\n\nLOG_LEVEL=INFO\n\nSENTRY_DSN=https://key@sentry.io/prod-project\nSENTRY_ENVIRONMENT=production\nSENTRY_TRACES_SAMPLE_RATE=0.1\n</code></pre> <p>Production Security</p> <ul> <li>Use strong, randomly generated passwords</li> <li>Restrict database access with firewall rules</li> <li>Use TLS for database connections if over untrusted networks</li> <li>Limit BMP listener to management network</li> <li>Set file permissions: <code>chmod 600 .env</code></li> </ul>"},{"location":"configuration/#configuration-validation","title":"Configuration Validation","text":""},{"location":"configuration/#startup-checks","title":"Startup Checks","text":"<p>pybmpmon validates configuration on startup and fails fast with clear error messages:</p> <p>Missing required variable: <pre><code>ERROR: DATABASE_PASSWORD is not set\n</code></pre></p> <p>Invalid log level: <pre><code>ERROR: Invalid LOG_LEVEL: TRACE (must be DEBUG, INFO, WARNING, or ERROR)\n</code></pre></p> <p>Database connection failure: <pre><code>ERROR: Failed to connect to database at postgres:5432\nConnectionRefusedError: [Errno 111] Connection refused\n</code></pre></p>"},{"location":"configuration/#configuration-schema","title":"Configuration Schema","text":"<p>pybmpmon uses Pydantic Settings for type-safe configuration with automatic validation:</p> <pre><code>from pydantic_settings import BaseSettings\n\nclass Settings(BaseSettings):\n    # BMP Listener\n    bmp_listen_host: str = \"0.0.0.0\"\n    bmp_listen_port: int = 11019\n\n    # Database\n    database_host: str = \"postgres\"\n    database_port: int = 5432\n    database_name: str = \"bmpmon\"\n    database_user: str = \"bmpmon\"\n    database_password: str  # Required, no default\n\n    # Logging\n    log_level: str = \"INFO\"\n\n    # Sentry (Optional)\n    sentry_dsn: str = \"\"\n    sentry_environment: str = \"production\"\n    sentry_traces_sample_rate: float = 0.1\n\n    class Config:\n        env_file = \".env\"\n        case_sensitive = False\n</code></pre>"},{"location":"configuration/#testing-configuration","title":"Testing Configuration","text":""},{"location":"configuration/#verify-configuration","title":"Verify Configuration","text":"<pre><code># Print current configuration (redacts passwords)\ndocker-compose run --rm pybmpmon python -c \"\nfrom pybmpmon.config import settings\nprint(f'BMP Listener: {settings.bmp_listen_host}:{settings.bmp_listen_port}')\nprint(f'Database: {settings.database_host}:{settings.database_port}/{settings.database_name}')\nprint(f'Log Level: {settings.log_level}')\nprint(f'Sentry: {\\\"Enabled\\\" if settings.sentry_dsn else \\\"Disabled\\\"}')\n\"\n</code></pre>"},{"location":"configuration/#test-database-connection","title":"Test Database Connection","text":"<pre><code># Test database connectivity\ndocker-compose exec postgres pg_isready -h localhost -U bmpmon\n\n# Connect to database\ndocker-compose exec postgres psql -U bmpmon -d bmpmon -c \"SELECT version();\"\n</code></pre>"},{"location":"configuration/#test-bmp-listener","title":"Test BMP Listener","text":"<pre><code># Check if BMP port is listening\nnc -z localhost 11019 &amp;&amp; echo \"BMP port is open\"\n\n# View listener logs\ndocker-compose logs -f pybmpmon | grep bmp_listener_started\n</code></pre>"},{"location":"configuration/#configuration-best-practices","title":"Configuration Best Practices","text":""},{"location":"configuration/#1-use-environment-specific-files","title":"1. Use Environment-Specific Files","text":"<p>Maintain separate <code>.env</code> files for each environment:</p> <pre><code>.env.development\n.env.staging\n.env.production\n</code></pre> <p>Symlink or copy the appropriate file:</p> <pre><code>ln -sf .env.production .env\n</code></pre>"},{"location":"configuration/#2-never-commit-secrets","title":"2. Never Commit Secrets","text":"<p>Add <code>.env</code> to <code>.gitignore</code>:</p> <pre><code># Environment files\n.env\n.env.*\n!.env.example\n</code></pre>"},{"location":"configuration/#3-use-secret-management","title":"3. Use Secret Management","text":"<p>For production, consider using secret management tools:</p> <ul> <li>Docker Secrets (Docker Swarm)</li> <li>Kubernetes Secrets</li> <li>HashiCorp Vault</li> <li>AWS Secrets Manager</li> <li>Azure Key Vault</li> </ul>"},{"location":"configuration/#4-rotate-credentials-regularly","title":"4. Rotate Credentials Regularly","text":"<ul> <li>Change database passwords periodically</li> <li>Rotate Sentry DSN if compromised</li> <li>Update credentials after staff changes</li> </ul>"},{"location":"configuration/#5-monitor-configuration-changes","title":"5. Monitor Configuration Changes","text":"<ul> <li>Log configuration changes</li> <li>Use infrastructure-as-code (Terraform, Ansible)</li> <li>Track changes in version control (for non-sensitive parts)</li> </ul>"},{"location":"configuration/#troubleshooting-configuration-issues","title":"Troubleshooting Configuration Issues","text":""},{"location":"configuration/#application-wont-start","title":"Application Won't Start","text":"<p>Symptom: Container exits immediately</p> <p>Check: <pre><code># View exit logs\ndocker-compose logs pybmpmon\n\n# Common issues:\n# - DATABASE_PASSWORD not set\n# - Invalid LOG_LEVEL value\n# - Database unreachable\n</code></pre></p>"},{"location":"configuration/#database-connection-errors","title":"Database Connection Errors","text":"<p>Symptom: <code>ConnectionRefusedError</code> or timeout</p> <p>Solutions: <pre><code># Verify database is running\ndocker-compose ps postgres\n\n# Check database logs\ndocker-compose logs postgres\n\n# Test connection manually\ndocker-compose exec postgres psql -U bmpmon -d bmpmon\n\n# Verify hostname resolution\ndocker-compose exec pybmpmon ping postgres\n</code></pre></p>"},{"location":"configuration/#sentry-not-receiving-events","title":"Sentry Not Receiving Events","text":"<p>Symptom: No errors in Sentry dashboard</p> <p>Check: <pre><code># Verify DSN is set\ndocker-compose exec pybmpmon env | grep SENTRY_DSN\n\n# Check logs for initialization\ndocker-compose logs pybmpmon | grep sentry_initialized\n\n# Test network connectivity to sentry.io\ndocker-compose exec pybmpmon curl -I https://sentry.io\n</code></pre></p>"},{"location":"configuration/#high-memory-usage","title":"High Memory Usage","text":"<p>Symptom: Container using excessive memory</p> <p>Check: <pre><code># Monitor memory usage\ndocker stats pybmpmon\n\n# Possible causes:\n# - Too many database connections (reduce DATABASE_POOL_MAX_SIZE)\n# - DEBUG logging with high route volume\n# - Large batch sizes\n</code></pre></p>"},{"location":"configuration/#next-steps","title":"Next Steps","text":"<ul> <li>SQL Queries: Query route data</li> <li>Sentry Integration: Set up error monitoring</li> <li>Logging: Understand log output</li> <li>Troubleshooting: Common issues and solutions</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>This guide covers installing pybmpmon using Docker Compose (recommended) or running it directly with Python.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":""},{"location":"installation/#docker-compose-installation-recommended","title":"Docker Compose Installation (Recommended)","text":"<ul> <li>Docker Engine 20.10+</li> <li>Docker Compose v2+</li> <li>4GB RAM minimum</li> <li>100GB+ disk space for database</li> </ul>"},{"location":"installation/#python-installation-advanced","title":"Python Installation (Advanced)","text":"<ul> <li>Python 3.11, 3.12, or 3.13</li> <li>PostgreSQL 16+ with TimescaleDB extension</li> <li>4GB RAM minimum</li> <li>Linux or macOS</li> </ul>"},{"location":"installation/#quick-start-with-docker-compose","title":"Quick Start with Docker Compose","text":""},{"location":"installation/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/DigitalVortexLLC/pybmpmon.git\ncd pybmpmon\n</code></pre>"},{"location":"installation/#2-create-configuration-file","title":"2. Create Configuration File","text":"<p>Copy the example configuration:</p> <pre><code>cp .env.example .env\n</code></pre> <p>Edit <code>.env</code> with your settings:</p> <pre><code># BMP Listener\nBMP_LISTEN_HOST=0.0.0.0\nBMP_LISTEN_PORT=11019\n\n# Database\nDATABASE_HOST=postgres\nDATABASE_PORT=5432\nDATABASE_NAME=bmpmon\nDATABASE_USER=bmpmon\nDATABASE_PASSWORD=changeme  # Change this!\n\n# Logging\nLOG_LEVEL=INFO\n\n# Sentry (Optional - leave empty to disable)\nSENTRY_DSN=\nSENTRY_ENVIRONMENT=production\nSENTRY_TRACES_SAMPLE_RATE=0.1\n</code></pre> <p>Security</p> <p>Change the default database password before deploying to production!</p>"},{"location":"installation/#3-start-services","title":"3. Start Services","text":"<p>Start PostgreSQL/TimescaleDB and pybmpmon:</p> <pre><code>docker-compose up -d\n</code></pre> <p>This will:</p> <ol> <li>Pull the necessary Docker images</li> <li>Start PostgreSQL with TimescaleDB extension</li> <li>Initialize the database schema</li> <li>Start the pybmpmon BMP listener on port 11019</li> </ol>"},{"location":"installation/#4-verify-installation","title":"4. Verify Installation","text":"<p>Check that services are running:</p> <pre><code># Check service status\ndocker-compose ps\n\n# View logs\ndocker-compose logs -f pybmpmon\n\n# Check BMP port is listening\nnc -z localhost 11019 &amp;&amp; echo \"BMP port is open\"\n\n# Check database connectivity\ndocker-compose exec postgres pg_isready\n</code></pre> <p>Expected output in logs:</p> <pre><code>{\n  \"event\": \"bmp_listener_started\",\n  \"level\": \"INFO\",\n  \"timestamp\": \"2025-09-30T10:00:00.000000Z\",\n  \"host\": \"0.0.0.0\",\n  \"port\": 11019\n}\n</code></pre>"},{"location":"installation/#5-configure-router","title":"5. Configure Router","text":"<p>Configure your router to send BMP traffic to the pybmpmon listener:</p> Cisco IOS-XRJuniper JunosArista EOS <pre><code>bmp server 1\n host &lt;pybmpmon-ip&gt; port 11019\n description pybmpmon monitoring\n initial-delay 5\n stats-reporting-period 60\n update-source Loopback0\n!\nrouter bgp 65000\n bmp server 1\n  activate\n</code></pre> <pre><code>set routing-options bmp station pybmpmon\nset routing-options bmp station pybmpmon connection-mode active\nset routing-options bmp station pybmpmon station-address &lt;pybmpmon-ip&gt;\nset routing-options bmp station pybmpmon station-port 11019\nset routing-options bmp station pybmpmon route-monitoring pre-policy\n</code></pre> <pre><code>router bgp 65000\n   bmp server pybmpmon\n      host &lt;pybmpmon-ip&gt; port 11019\n      send route-monitoring pre-policy\n</code></pre> <p>Network Connectivity</p> <p>Ensure firewall rules allow TCP traffic from your routers to port 11019 on the pybmpmon host.</p>"},{"location":"installation/#6-verify-route-data","title":"6. Verify Route Data","text":"<p>After routers connect, verify routes are being stored:</p> <pre><code># Connect to database\ndocker-compose exec postgres psql -U bmpmon -d bmpmon\n\n# Check for routes\nSELECT COUNT(*) FROM route_updates;\n\n# Check BMP peers\nSELECT peer_ip, is_active, first_seen, last_seen FROM bmp_peers;\n\n# Exit psql\n\\q\n</code></pre>"},{"location":"installation/#docker-compose-configuration","title":"Docker Compose Configuration","text":""},{"location":"installation/#docker-composeyml","title":"docker-compose.yml","text":"<pre><code>version: '3.8'\n\nservices:\n  postgres:\n    image: timescale/timescaledb:latest-pg16\n    container_name: pybmpmon-postgres\n    environment:\n      POSTGRES_DB: ${DATABASE_NAME:-bmpmon}\n      POSTGRES_USER: ${DATABASE_USER:-bmpmon}\n      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:?DATABASE_PASSWORD not set}\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/01_init.sql\n    ports:\n      - \"5432:5432\"\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U ${DATABASE_USER:-bmpmon}\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n\n  pybmpmon:\n    build: .\n    container_name: pybmpmon\n    depends_on:\n      postgres:\n        condition: service_healthy\n    ports:\n      - \"${BMP_LISTEN_PORT:-11019}:11019\"\n    environment:\n      - BMP_LISTEN_HOST=${BMP_LISTEN_HOST:-0.0.0.0}\n      - BMP_LISTEN_PORT=${BMP_LISTEN_PORT:-11019}\n      - DATABASE_HOST=${DATABASE_HOST:-postgres}\n      - DATABASE_PORT=${DATABASE_PORT:-5432}\n      - DATABASE_NAME=${DATABASE_NAME:-bmpmon}\n      - DATABASE_USER=${DATABASE_USER:-bmpmon}\n      - DATABASE_PASSWORD=${DATABASE_PASSWORD:?DATABASE_PASSWORD not set}\n      - LOG_LEVEL=${LOG_LEVEL:-INFO}\n      - SENTRY_DSN=${SENTRY_DSN:-}\n      - SENTRY_ENVIRONMENT=${SENTRY_ENVIRONMENT:-production}\n      - SENTRY_TRACES_SAMPLE_RATE=${SENTRY_TRACES_SAMPLE_RATE:-0.1}\n    restart: unless-stopped\n    healthcheck:\n      test: [\"CMD-SHELL\", \"nc -z localhost 11019 || exit 1\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\nvolumes:\n  postgres_data:\n</code></pre>"},{"location":"installation/#dockerfile","title":"Dockerfile","text":"<pre><code>FROM python:3.13-slim\n\n# Install system dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    netcat-openbsd \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Create non-root user\nRUN useradd -m -u 1000 pybmpmon\n\nWORKDIR /app\n\n# Install Poetry\nRUN pip install poetry==1.8.0\n\n# Copy project files\nCOPY pyproject.toml poetry.lock ./\nCOPY src/ ./src/\nCOPY README.md ./\n\n# Install dependencies\nRUN poetry config virtualenvs.create false \\\n    &amp;&amp; poetry install --only main --no-interaction --no-ansi\n\n# Switch to non-root user\nUSER pybmpmon\n\n# Expose BMP port\nEXPOSE 11019\n\n# Run application\nCMD [\"python\", \"-m\", \"pybmpmon\"]\n</code></pre>"},{"location":"installation/#advanced-installation-options","title":"Advanced Installation Options","text":""},{"location":"installation/#using-external-postgresql","title":"Using External PostgreSQL","text":"<p>If you have an existing PostgreSQL/TimescaleDB instance:</p> <ol> <li>Disable the postgres service in <code>docker-compose.yml</code>:</li> </ol> <pre><code>services:\n  postgres:\n    deploy:\n      replicas: 0  # Disable built-in PostgreSQL\n</code></pre> <ol> <li>Update <code>.env</code> to point to your database:</li> </ol> <pre><code>DATABASE_HOST=your-postgres-host\nDATABASE_PORT=5432\nDATABASE_NAME=bmpmon\nDATABASE_USER=bmpmon\nDATABASE_PASSWORD=your-password\n</code></pre> <ol> <li>Start the application:</li> </ol> <pre><code>docker-compose up -d pybmpmon\n</code></pre> <p>Note: The application automatically detects if the database schema exists and runs migrations if needed. No manual schema initialization is required.</p>"},{"location":"installation/#running-without-docker","title":"Running Without Docker","text":"<p>For development or custom deployments:</p> <pre><code># Install dependencies\npoetry install\n\n# Create .env file\ncp .env.example .env\n# Edit .env with your settings\n\n# Run application (schema initialization is automatic)\npoetry run python -m pybmpmon\n</code></pre>"},{"location":"installation/#scaling-considerations","title":"Scaling Considerations","text":""},{"location":"installation/#single-server-setup","title":"Single Server Setup","text":"<p>For most deployments, a single pybmpmon instance is sufficient:</p> <ul> <li>Peers: 100+ BMP peers</li> <li>Routes: 1-2M routes per peer</li> <li>Throughput: 15-20k routes/second</li> <li>Hardware: 4 CPU cores, 16GB RAM, 500GB SSD</li> </ul>"},{"location":"installation/#database-sizing","title":"Database Sizing","text":"<p>Calculate storage requirements:</p> <ul> <li>Route updates: ~500 bytes per update</li> <li>Retention: 5 years</li> <li>Example: 1.1M routes \u00d7 10 updates/day \u00d7 365 days \u00d7 5 years \u00d7 500 bytes \u2248 10TB</li> </ul> <p>Storage Planning</p> <p>Use TimescaleDB compression (30 days old data) to reduce storage by 70-90%.</p>"},{"location":"installation/#network-planning","title":"Network Planning","text":"<ul> <li>Bandwidth: ~1-5 Mbps per BMP peer during initial table transfer</li> <li>Steady state: ~100 Kbps per peer for route updates</li> <li>Firewall: Allow TCP from routers to port 11019</li> </ul>"},{"location":"installation/#health-monitoring","title":"Health Monitoring","text":""},{"location":"installation/#docker-healthchecks","title":"Docker Healthchecks","text":"<p>Built-in healthchecks monitor:</p> <ol> <li>BMP port: <code>nc -z localhost 11019</code></li> <li>Database: <code>pg_isready</code></li> </ol> <p>View health status:</p> <pre><code>docker-compose ps\n</code></pre>"},{"location":"installation/#manual-health-checks","title":"Manual Health Checks","text":"<pre><code># Check BMP listener\nnc -z localhost 11019 &amp;&amp; echo \"BMP listener OK\"\n\n# Check database\ndocker-compose exec postgres pg_isready\n\n# Check process\ndocker-compose exec pybmpmon pgrep -f pybmpmon &amp;&amp; echo \"Process running\"\n\n# Check recent logs for errors\ndocker-compose logs --tail=100 pybmpmon | grep -i error\n</code></pre>"},{"location":"installation/#upgrading","title":"Upgrading","text":""},{"location":"installation/#minor-version-upgrades","title":"Minor Version Upgrades","text":"<pre><code># Pull latest images\ndocker-compose pull\n\n# Restart services\ndocker-compose up -d\n\n# Check logs for errors\ndocker-compose logs -f pybmpmon\n</code></pre>"},{"location":"installation/#major-version-upgrades","title":"Major Version Upgrades","text":"<ol> <li>Backup database (see Troubleshooting section)</li> <li>Pull new images</li> <li>Run database migrations if needed</li> <li>Restart services</li> <li>Verify functionality</li> </ol>"},{"location":"installation/#uninstallation","title":"Uninstallation","text":""},{"location":"installation/#remove-services","title":"Remove Services","text":"<pre><code># Stop services\ndocker-compose down\n\n# Remove volumes (WARNING: deletes all data)\ndocker-compose down -v\n</code></pre>"},{"location":"installation/#remove-images","title":"Remove Images","text":"<pre><code># Remove pybmpmon images\ndocker image rm pybmpmon:latest\n\n# Remove PostgreSQL images\ndocker image rm timescale/timescaledb:latest-pg16\n</code></pre>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<ul> <li>Configuration: Configure BMP listener and database options</li> <li>SQL Queries: Query route data and analyze BGP routing</li> <li>Troubleshooting: Common issues and solutions</li> </ul>"},{"location":"logging_examples/","title":"Logging Examples","text":"<p>This document provides examples of structured JSON logs produced by pybmpmon.</p>"},{"location":"logging_examples/#configuration","title":"Configuration","text":"<p>Configure log level via <code>.env</code> file: <pre><code>LOG_LEVEL=INFO  # DEBUG, INFO, WARNING, ERROR, CRITICAL\n</code></pre></p> <p>All logs are output to stdout as JSON.</p>"},{"location":"logging_examples/#application-lifecycle","title":"Application Lifecycle","text":""},{"location":"logging_examples/#application-startup","title":"Application Startup","text":"<pre><code>{\n  \"event\": \"pybmpmon_starting\",\n  \"level\": \"INFO\",\n  \"timestamp\": \"2025-09-30T19:30:45.123456Z\",\n  \"version\": \"0.1.0\",\n  \"python_version\": \"3.13.7\",\n  \"listen_host\": \"0.0.0.0\",\n  \"listen_port\": 11019,\n  \"log_level\": \"INFO\"\n}\n</code></pre>"},{"location":"logging_examples/#application-shutdown","title":"Application Shutdown","text":"<pre><code>{\n  \"event\": \"pybmpmon_stopped\",\n  \"level\": \"INFO\",\n  \"timestamp\": \"2025-09-30T20:30:45.123456Z\"\n}\n</code></pre>"},{"location":"logging_examples/#bmp-peer-events","title":"BMP Peer Events","text":""},{"location":"logging_examples/#peer-connected","title":"Peer Connected","text":"<pre><code>{\n  \"event\": \"peer_connected\",\n  \"level\": \"INFO\",\n  \"timestamp\": \"2025-09-30T19:31:00.123456Z\",\n  \"peer\": \"192.0.2.1\"\n}\n</code></pre>"},{"location":"logging_examples/#peer-disconnected","title":"Peer Disconnected","text":"<pre><code>{\n  \"event\": \"peer_disconnected\",\n  \"level\": \"INFO\",\n  \"timestamp\": \"2025-09-30T20:15:00.123456Z\",\n  \"peer\": \"192.0.2.1\",\n  \"reason\": \"connection_reset\",\n  \"duration_seconds\": 2640\n}\n</code></pre>"},{"location":"logging_examples/#peer-connection-closed","title":"Peer Connection Closed","text":"<pre><code>{\n  \"event\": \"peer_connection_closed\",\n  \"level\": \"INFO\",\n  \"timestamp\": \"2025-09-30T20:15:00.234567Z\",\n  \"peer\": \"192.0.2.1\",\n  \"duration_seconds\": 2640\n}\n</code></pre>"},{"location":"logging_examples/#bmp-peer-up","title":"BMP Peer Up","text":"<pre><code>{\n  \"event\": \"bmp_peer_up\",\n  \"level\": \"INFO\",\n  \"timestamp\": \"2025-09-30T19:31:01.123456Z\",\n  \"peer\": \"192.0.2.1\",\n  \"bgp_peer\": \"192.0.2.100\",\n  \"bgp_peer_asn\": 65001\n}\n</code></pre>"},{"location":"logging_examples/#bmp-peer-down","title":"BMP Peer Down","text":"<pre><code>{\n  \"event\": \"bmp_peer_down\",\n  \"level\": \"INFO\",\n  \"timestamp\": \"2025-09-30T20:14:59.123456Z\",\n  \"peer\": \"192.0.2.1\",\n  \"reason\": 1\n}\n</code></pre>"},{"location":"logging_examples/#route-statistics-every-10-seconds","title":"Route Statistics (Every 10 Seconds)","text":"<pre><code>{\n  \"event\": \"route_stats\",\n  \"level\": \"INFO\",\n  \"timestamp\": \"2025-09-30T19:31:10.123456Z\",\n  \"peer\": \"192.0.2.1\",\n  \"received\": 1523,\n  \"processed\": 1520,\n  \"ipv4\": 1245,\n  \"ipv6\": 275,\n  \"evpn\": 0,\n  \"errors\": 3,\n  \"throughput_per_sec\": 152\n}\n</code></pre>"},{"location":"logging_examples/#explanation","title":"Explanation:","text":"<ul> <li><code>received</code>: Total BMP messages received in this 10-second interval</li> <li><code>processed</code>: Total routes processed (announced + withdrawn)</li> <li><code>ipv4</code>: IPv4 unicast routes processed</li> <li><code>ipv6</code>: IPv6 unicast routes processed</li> <li><code>evpn</code>: EVPN routes processed</li> <li><code>errors</code>: Parse errors encountered</li> <li><code>throughput_per_sec</code>: Routes processed per second</li> </ul>"},{"location":"logging_examples/#error-logging","title":"Error Logging","text":""},{"location":"logging_examples/#bmp-parse-error","title":"BMP Parse Error","text":"<pre><code>{\n  \"event\": \"bmp_parse_error\",\n  \"level\": \"ERROR\",\n  \"timestamp\": \"2025-09-30T19:32:15.123456Z\",\n  \"peer\": \"192.0.2.1\",\n  \"error\": \"Invalid BMP version: expected 3, got 2\",\n  \"data_hex\": \"02000000060400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\n}\n</code></pre>"},{"location":"logging_examples/#bgp-parse-error","title":"BGP Parse Error","text":"<pre><code>{\n  \"event\": \"bgp_parse_error\",\n  \"level\": \"ERROR\",\n  \"timestamp\": \"2025-09-30T19:32:20.123456Z\",\n  \"peer\": \"192.0.2.1\",\n  \"error\": \"Invalid BGP marker\"\n}\n</code></pre>"},{"location":"logging_examples/#message-processing-error","title":"Message Processing Error","text":"<pre><code>{\n  \"event\": \"message_processing_error\",\n  \"level\": \"ERROR\",\n  \"timestamp\": \"2025-09-30T19:32:25.123456Z\",\n  \"peer\": \"192.0.2.1\",\n  \"error\": \"Unexpected error during message processing\"\n}\n</code></pre>"},{"location":"logging_examples/#debug-level-logging","title":"DEBUG Level Logging","text":""},{"location":"logging_examples/#bmp-message-received-with-hex-dump","title":"BMP Message Received (with Hex Dump)","text":"<pre><code>{\n  \"event\": \"bmp_message_received\",\n  \"level\": \"DEBUG\",\n  \"timestamp\": \"2025-09-30T19:31:05.123456Z\",\n  \"peer\": \"192.0.2.1\",\n  \"version\": 3,\n  \"length\": 100,\n  \"msg_type\": \"ROUTE_MONITORING\",\n  \"data_hex\": \"0300000064000000000000000001c0a8010a200000001a0200000001010101c0a802fe400101004002004003040ac00001800404000000648005040000006480090408010102\",\n  \"total_size\": 100\n}\n</code></pre>"},{"location":"logging_examples/#bgp-update-parsed","title":"BGP UPDATE Parsed","text":"<pre><code>{\n  \"event\": \"bgp_update_parsed\",\n  \"level\": \"DEBUG\",\n  \"timestamp\": \"2025-09-30T19:31:05.234567Z\",\n  \"peer\": \"192.0.2.1\",\n  \"bgp_peer\": \"192.0.2.100\",\n  \"family\": \"ipv4_unicast\",\n  \"prefixes_count\": 5,\n  \"withdrawn_count\": 2,\n  \"as_path\": [65000, 65001, 65002],\n  \"next_hop\": \"192.0.2.254\"\n}\n</code></pre>"},{"location":"logging_examples/#database-and-service-events","title":"Database and Service Events","text":""},{"location":"logging_examples/#database-pool-created","title":"Database Pool Created","text":"<pre><code>{\n  \"event\": \"database_pool_created\",\n  \"level\": \"INFO\",\n  \"timestamp\": \"2025-09-30T19:30:50.123456Z\"\n}\n</code></pre>"},{"location":"logging_examples/#batch-writer-started","title":"Batch Writer Started","text":"<pre><code>{\n  \"event\": \"batch_writer_started\",\n  \"level\": \"INFO\",\n  \"timestamp\": \"2025-09-30T19:30:51.123456Z\"\n}\n</code></pre>"},{"location":"logging_examples/#statistics-collector-started","title":"Statistics Collector Started","text":"<pre><code>{\n  \"event\": \"stats_collector_started\",\n  \"level\": \"INFO\",\n  \"timestamp\": \"2025-09-30T19:30:52.123456Z\",\n  \"interval_seconds\": 10.0\n}\n</code></pre>"},{"location":"logging_examples/#bmp-listener-started","title":"BMP Listener Started","text":"<pre><code>{\n  \"event\": \"bmp_listener_started\",\n  \"level\": \"INFO\",\n  \"timestamp\": \"2025-09-30T19:30:53.123456Z\",\n  \"host\": \"0.0.0.0\",\n  \"port\": 11019,\n  \"address\": [\"0.0.0.0\", 11019]\n}\n</code></pre>"},{"location":"logging_examples/#sentry-integration-optional","title":"Sentry Integration (Optional)","text":""},{"location":"logging_examples/#sentry-initialized","title":"Sentry Initialized","text":"<pre><code>{\n  \"event\": \"sentry_initialized\",\n  \"level\": \"INFO\",\n  \"timestamp\": \"2025-09-30T19:30:45.567890Z\",\n  \"environment\": \"production\"\n}\n</code></pre>"},{"location":"logging_examples/#sentry-disabled","title":"Sentry Disabled","text":"<pre><code>{\n  \"event\": \"sentry_disabled\",\n  \"level\": \"DEBUG\",\n  \"timestamp\": \"2025-09-30T19:30:45.567890Z\"\n}\n</code></pre>"},{"location":"logging_examples/#log-aggregation-and-analysis","title":"Log Aggregation and Analysis","text":"<p>These JSON logs can be easily parsed by log aggregation tools:</p> <ul> <li>Loki: Use promtail to ship logs with JSON parsing</li> <li>CloudWatch Logs: Use JSON parsing in log group filters</li> <li>Elasticsearch: Direct JSON ingestion</li> <li>Datadog: JSON log parsing with automatic field extraction</li> <li>Splunk: JSON source type</li> </ul>"},{"location":"logging_examples/#example-loki-query","title":"Example Loki Query","text":"<pre><code>{job=\"pybmpmon\"} | json | event=\"route_stats\" | throughput_per_sec &gt; 1000\n</code></pre>"},{"location":"logging_examples/#example-cloudwatch-insights-query","title":"Example CloudWatch Insights Query","text":"<pre><code>fields @timestamp, peer, throughput_per_sec\n| filter event = \"route_stats\"\n| stats avg(throughput_per_sec) by peer\n</code></pre>"},{"location":"logging_examples/#common-use-cases","title":"Common Use Cases","text":""},{"location":"logging_examples/#monitor-route-churn","title":"Monitor Route Churn","text":"<p>Filter for high route update counts: <pre><code>event=\"route_stats\" AND (processed &gt; 5000)\n</code></pre></p>"},{"location":"logging_examples/#track-peer-session-stability","title":"Track Peer Session Stability","text":"<p>Monitor peer disconnects: <pre><code>event=\"peer_disconnected\" AND duration_seconds &lt; 300\n</code></pre></p>"},{"location":"logging_examples/#debug-parse-errors","title":"Debug Parse Errors","text":"<p>View all parse errors with context: <pre><code>level=\"ERROR\" AND (event=\"bmp_parse_error\" OR event=\"bgp_parse_error\")\n</code></pre></p>"},{"location":"logging_examples/#monitor-throughput","title":"Monitor Throughput","text":"<p>Track routes per second across all peers: <pre><code>event=\"route_stats\" | stats sum(throughput_per_sec)\n</code></pre></p>"},{"location":"queries/","title":"SQL Queries","text":"<p>This guide provides example SQL queries for analyzing BGP route data collected by pybmpmon.</p>"},{"location":"queries/#connecting-to-database","title":"Connecting to Database","text":""},{"location":"queries/#using-docker-compose","title":"Using Docker Compose","text":"<pre><code># Connect to PostgreSQL\ndocker-compose exec postgres psql -U bmpmon -d bmpmon\n</code></pre>"},{"location":"queries/#direct-connection","title":"Direct Connection","text":"<pre><code># Using psql\npsql -h localhost -U bmpmon -d bmpmon\n\n# Using connection string\npsql postgresql://bmpmon:password@localhost:5432/bmpmon\n</code></pre>"},{"location":"queries/#basic-queries","title":"Basic Queries","text":""},{"location":"queries/#count-total-routes","title":"Count Total Routes","text":"<pre><code>SELECT COUNT(*) as total_routes\nFROM route_updates;\n</code></pre>"},{"location":"queries/#count-routes-by-address-family","title":"Count Routes by Address Family","text":"<pre><code>SELECT\n    family,\n    COUNT(*) as route_count\nFROM route_updates\nGROUP BY family\nORDER BY route_count DESC;\n</code></pre> <p>Expected output: <pre><code>   family      | route_count\n---------------+-------------\n ipv4_unicast  |     1100000\n ipv6_unicast  |      500000\n evpn          |      250000\n</code></pre></p>"},{"location":"queries/#active-bmp-peers","title":"Active BMP Peers","text":"<pre><code>SELECT\n    peer_ip,\n    router_id,\n    is_active,\n    first_seen,\n    last_seen,\n    AGE(last_seen, first_seen) as session_duration\nFROM bmp_peers\nWHERE is_active = TRUE\nORDER BY first_seen DESC;\n</code></pre>"},{"location":"queries/#recent-peer-events","title":"Recent Peer Events","text":"<pre><code>SELECT\n    time,\n    peer_ip,\n    event_type,\n    reason_code\nFROM peer_events\nORDER BY time DESC\nLIMIT 20;\n</code></pre>"},{"location":"queries/#route-analysis","title":"Route Analysis","text":""},{"location":"queries/#current-routes-most-recent-per-prefix","title":"Current Routes (Most Recent Per Prefix)","text":"<p>Get the current state of routes (latest update per prefix):</p> <pre><code>SELECT DISTINCT ON (bgp_peer_ip, prefix)\n    bgp_peer_ip,\n    prefix,\n    next_hop,\n    as_path,\n    time as last_seen,\n    is_withdrawn\nFROM route_updates\nWHERE prefix IS NOT NULL\nORDER BY bgp_peer_ip, prefix, time DESC\nLIMIT 100;\n</code></pre>"},{"location":"queries/#active-routes-only-not-withdrawn","title":"Active Routes Only (Not Withdrawn)","text":"<pre><code>SELECT DISTINCT ON (bgp_peer_ip, prefix)\n    bgp_peer_ip,\n    prefix,\n    next_hop,\n    as_path,\n    communities,\n    time as last_seen\nFROM route_updates\nWHERE prefix IS NOT NULL\n  AND is_withdrawn = FALSE\nORDER BY bgp_peer_ip, prefix, time DESC\nLIMIT 100;\n</code></pre>"},{"location":"queries/#routes-by-specific-peer","title":"Routes by Specific Peer","text":"<pre><code>SELECT DISTINCT ON (prefix)\n    prefix,\n    next_hop,\n    as_path,\n    local_pref,\n    med,\n    time as last_seen\nFROM route_updates\nWHERE bgp_peer_ip = '192.0.2.100'\n  AND is_withdrawn = FALSE\nORDER BY prefix, time DESC;\n</code></pre>"},{"location":"queries/#route-churn-analysis","title":"Route Churn Analysis","text":""},{"location":"queries/#most-unstable-prefixes-highest-update-frequency","title":"Most Unstable Prefixes (Highest Update Frequency)","text":"<p>Identify prefixes with frequent updates (flapping routes):</p> <pre><code>SELECT\n    prefix,\n    COUNT(*) as update_count,\n    MIN(time) as first_seen,\n    MAX(time) as last_seen,\n    AGE(MAX(time), MIN(time)) as churn_window\nFROM route_updates\nWHERE time &gt; NOW() - INTERVAL '1 hour'\n  AND prefix IS NOT NULL\nGROUP BY prefix\nHAVING COUNT(*) &gt; 10\nORDER BY update_count DESC\nLIMIT 50;\n</code></pre>"},{"location":"queries/#route-withdrawals-in-last-hour","title":"Route Withdrawals in Last Hour","text":"<pre><code>SELECT\n    time,\n    bmp_peer_ip,\n    bgp_peer_ip,\n    prefix,\n    as_path\nFROM route_updates\nWHERE time &gt; NOW() - INTERVAL '1 hour'\n  AND is_withdrawn = TRUE\nORDER BY time DESC;\n</code></pre>"},{"location":"queries/#routes-announced-and-withdrawn-multiple-times","title":"Routes Announced and Withdrawn Multiple Times","text":"<pre><code>WITH route_changes AS (\n    SELECT\n        prefix,\n        is_withdrawn,\n        time\n    FROM route_updates\n    WHERE time &gt; NOW() - INTERVAL '24 hours'\n      AND prefix IS NOT NULL\n)\nSELECT\n    prefix,\n    COUNT(*) as total_changes,\n    SUM(CASE WHEN is_withdrawn = TRUE THEN 1 ELSE 0 END) as withdrawals,\n    SUM(CASE WHEN is_withdrawn = FALSE THEN 1 ELSE 0 END) as announcements\nFROM route_changes\nGROUP BY prefix\nHAVING COUNT(*) &gt; 5\nORDER BY total_changes DESC\nLIMIT 100;\n</code></pre>"},{"location":"queries/#as-path-analysis","title":"AS Path Analysis","text":""},{"location":"queries/#routes-containing-specific-asn","title":"Routes Containing Specific ASN","text":"<p>Find all routes passing through AS 65001:</p> <pre><code>SELECT DISTINCT ON (prefix)\n    prefix,\n    bgp_peer_ip,\n    as_path,\n    next_hop,\n    time as last_seen\nFROM route_updates\nWHERE 65001 = ANY(as_path)\n  AND is_withdrawn = FALSE\nORDER BY prefix, time DESC\nLIMIT 100;\n</code></pre>"},{"location":"queries/#as-path-length-distribution","title":"AS Path Length Distribution","text":"<pre><code>SELECT\n    array_length(as_path, 1) as path_length,\n    COUNT(*) as route_count\nFROM (\n    SELECT DISTINCT ON (prefix)\n        prefix,\n        as_path\n    FROM route_updates\n    WHERE is_withdrawn = FALSE\n      AND as_path IS NOT NULL\n    ORDER BY prefix, time DESC\n) current_routes\nGROUP BY path_length\nORDER BY path_length;\n</code></pre>"},{"location":"queries/#top-origin-asns","title":"Top Origin ASNs","text":"<p>Find the most common origin ASNs (last AS in path):</p> <pre><code>SELECT\n    as_path[array_length(as_path, 1)] as origin_asn,\n    COUNT(*) as prefix_count\nFROM (\n    SELECT DISTINCT ON (prefix)\n        prefix,\n        as_path\n    FROM route_updates\n    WHERE is_withdrawn = FALSE\n      AND as_path IS NOT NULL\n      AND array_length(as_path, 1) &gt; 0\n    ORDER BY prefix, time DESC\n) current_routes\nGROUP BY origin_asn\nORDER BY prefix_count DESC\nLIMIT 20;\n</code></pre>"},{"location":"queries/#detect-as-path-prepending","title":"Detect AS Path Prepending","text":"<p>Find routes with AS path prepending (same ASN repeated):</p> <pre><code>SELECT\n    prefix,\n    as_path,\n    array_length(as_path, 1) as path_length,\n    COUNT(*) OVER (PARTITION BY as_path[1]) as prepend_count\nFROM (\n    SELECT DISTINCT ON (prefix)\n        prefix,\n        as_path\n    FROM route_updates\n    WHERE is_withdrawn = FALSE\n      AND array_length(as_path, 1) &gt; 1\n    ORDER BY prefix, time DESC\n) current_routes\nWHERE as_path[1] = as_path[2]  -- First two ASNs are the same\nLIMIT 100;\n</code></pre>"},{"location":"queries/#evpn-queries","title":"EVPN Queries","text":""},{"location":"queries/#find-mac-address-in-evpn","title":"Find MAC Address in EVPN","text":"<p>Locate a specific MAC address in EVPN routes:</p> <pre><code>SELECT\n    time,\n    bmp_peer_ip,\n    bgp_peer_ip,\n    mac_address,\n    prefix,\n    evpn_rd,\n    evpn_esi,\n    next_hop,\n    is_withdrawn\nFROM route_updates\nWHERE mac_address = '00:02:71:87:da:4d'\nORDER BY time DESC\nLIMIT 20;\n</code></pre>"},{"location":"queries/#evpn-routes-by-route-type","title":"EVPN Routes by Route Type","text":"<pre><code>SELECT\n    evpn_route_type,\n    COUNT(*) as route_count\nFROM (\n    SELECT DISTINCT ON (prefix, mac_address)\n        evpn_route_type,\n        prefix,\n        mac_address\n    FROM route_updates\n    WHERE family = 'evpn'\n      AND is_withdrawn = FALSE\n    ORDER BY prefix, mac_address, time DESC\n) current_evpn\nGROUP BY evpn_route_type\nORDER BY route_count DESC;\n</code></pre>"},{"location":"queries/#evpn-macip-bindings","title":"EVPN MAC/IP Bindings","text":"<pre><code>SELECT DISTINCT ON (mac_address, prefix)\n    mac_address,\n    prefix as ip_address,\n    evpn_rd,\n    next_hop as vtep,\n    time as last_seen\nFROM route_updates\nWHERE family = 'evpn'\n  AND evpn_route_type = 2  -- MAC/IP Advertisement\n  AND is_withdrawn = FALSE\nORDER BY mac_address, prefix, time DESC\nLIMIT 100;\n</code></pre>"},{"location":"queries/#bgp-communities-analysis","title":"BGP Communities Analysis","text":""},{"location":"queries/#routes-with-specific-community","title":"Routes with Specific Community","text":"<pre><code>SELECT DISTINCT ON (prefix)\n    prefix,\n    bgp_peer_ip,\n    as_path,\n    communities,\n    time as last_seen\nFROM route_updates\nWHERE '65000:100' = ANY(communities)\n  AND is_withdrawn = FALSE\nORDER BY prefix, time DESC\nLIMIT 100;\n</code></pre>"},{"location":"queries/#community-distribution","title":"Community Distribution","text":"<pre><code>WITH community_routes AS (\n    SELECT DISTINCT ON (prefix)\n        prefix,\n        communities\n    FROM route_updates\n    WHERE is_withdrawn = FALSE\n      AND communities IS NOT NULL\n    ORDER BY prefix, time DESC\n)\nSELECT\n    unnest(communities) as community,\n    COUNT(*) as route_count\nFROM community_routes\nGROUP BY community\nORDER BY route_count DESC\nLIMIT 50;\n</code></pre>"},{"location":"queries/#time-series-analysis","title":"Time-Series Analysis","text":""},{"location":"queries/#routes-received-per-hour-last-24-hours","title":"Routes Received Per Hour (Last 24 Hours)","text":"<pre><code>SELECT\n    time_bucket('1 hour', time) as hour,\n    COUNT(*) as route_updates,\n    COUNT(DISTINCT prefix) as unique_prefixes\nFROM route_updates\nWHERE time &gt; NOW() - INTERVAL '24 hours'\nGROUP BY hour\nORDER BY hour;\n</code></pre>"},{"location":"queries/#peak-route-update-rate","title":"Peak Route Update Rate","text":"<p>Find the busiest 5-minute window:</p> <pre><code>SELECT\n    time_bucket('5 minutes', time) as window,\n    COUNT(*) as route_count,\n    COUNT(*) / 300.0 as routes_per_second\nFROM route_updates\nWHERE time &gt; NOW() - INTERVAL '1 hour'\nGROUP BY window\nORDER BY route_count DESC\nLIMIT 10;\n</code></pre>"},{"location":"queries/#route-table-growth-over-time","title":"Route Table Growth Over Time","text":"<pre><code>WITH daily_routes AS (\n    SELECT\n        time_bucket('1 day', time) as day,\n        family,\n        COUNT(*) as routes_added\n    FROM route_updates\n    WHERE is_withdrawn = FALSE\n      AND time &gt; NOW() - INTERVAL '30 days'\n    GROUP BY day, family\n)\nSELECT\n    day,\n    family,\n    routes_added,\n    SUM(routes_added) OVER (PARTITION BY family ORDER BY day) as cumulative_routes\nFROM daily_routes\nORDER BY day, family;\n</code></pre>"},{"location":"queries/#performance-queries","title":"Performance Queries","text":""},{"location":"queries/#database-size","title":"Database Size","text":"<pre><code>SELECT\n    pg_size_pretty(pg_database_size('bmpmon')) as database_size;\n</code></pre>"},{"location":"queries/#table-sizes","title":"Table Sizes","text":"<pre><code>SELECT\n    schemaname,\n    tablename,\n    pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) as total_size,\n    pg_size_pretty(pg_relation_size(schemaname||'.'||tablename)) as table_size,\n    pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename) - pg_relation_size(schemaname||'.'||tablename)) as index_size\nFROM pg_tables\nWHERE schemaname = 'public'\nORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC;\n</code></pre>"},{"location":"queries/#index-usage","title":"Index Usage","text":"<pre><code>SELECT\n    schemaname,\n    tablename,\n    indexname,\n    idx_scan as index_scans,\n    idx_tup_read as tuples_read,\n    idx_tup_fetch as tuples_fetched\nFROM pg_stat_user_indexes\nORDER BY idx_scan DESC;\n</code></pre>"},{"location":"queries/#slow-queries","title":"Slow Queries","text":"<pre><code>-- First, enable pg_stat_statements extension\nCREATE EXTENSION IF NOT EXISTS pg_stat_statements;\n\n-- View slowest queries\nSELECT\n    mean_exec_time,\n    calls,\n    query\nFROM pg_stat_statements\nORDER BY mean_exec_time DESC\nLIMIT 10;\n</code></pre>"},{"location":"queries/#advanced-queries","title":"Advanced Queries","text":""},{"location":"queries/#route-changes-timeline-for-specific-prefix","title":"Route Changes Timeline for Specific Prefix","text":"<pre><code>SELECT\n    time,\n    bgp_peer_ip,\n    is_withdrawn,\n    next_hop,\n    as_path,\n    communities\nFROM route_updates\nWHERE prefix = '10.0.0.0/24'\nORDER BY time DESC\nLIMIT 100;\n</code></pre>"},{"location":"queries/#detect-route-hijacking-unexpected-origin-as","title":"Detect Route Hijacking (Unexpected Origin AS)","text":"<pre><code>-- First, get normal origin AS for each prefix\nWITH normal_origins AS (\n    SELECT\n        prefix,\n        mode() WITHIN GROUP (ORDER BY as_path[array_length(as_path, 1)]) as expected_origin\n    FROM route_updates\n    WHERE time &gt; NOW() - INTERVAL '7 days'\n      AND is_withdrawn = FALSE\n      AND array_length(as_path, 1) &gt; 0\n    GROUP BY prefix\n),\nrecent_routes AS (\n    SELECT DISTINCT ON (prefix)\n        prefix,\n        bgp_peer_ip,\n        as_path,\n        time\n    FROM route_updates\n    WHERE time &gt; NOW() - INTERVAL '1 hour'\n      AND is_withdrawn = FALSE\n      AND array_length(as_path, 1) &gt; 0\n    ORDER BY prefix, time DESC\n)\nSELECT\n    r.prefix,\n    r.bgp_peer_ip,\n    r.as_path,\n    no.expected_origin,\n    r.as_path[array_length(r.as_path, 1)] as current_origin,\n    r.time\nFROM recent_routes r\nJOIN normal_origins no ON r.prefix = no.prefix\nWHERE r.as_path[array_length(r.as_path, 1)] != no.expected_origin\nLIMIT 100;\n</code></pre>"},{"location":"queries/#peer-comparison-different-paths-to-same-prefix","title":"Peer Comparison (Different Paths to Same Prefix)","text":"<pre><code>SELECT\n    r1.prefix,\n    r1.bgp_peer_ip as peer1,\n    r1.as_path as peer1_path,\n    r2.bgp_peer_ip as peer2,\n    r2.as_path as peer2_path\nFROM (\n    SELECT DISTINCT ON (prefix)\n        prefix, bgp_peer_ip, as_path\n    FROM route_updates\n    WHERE bgp_peer_ip = '192.0.2.100'\n      AND is_withdrawn = FALSE\n    ORDER BY prefix, time DESC\n) r1\nJOIN (\n    SELECT DISTINCT ON (prefix)\n        prefix, bgp_peer_ip, as_path\n    FROM route_updates\n    WHERE bgp_peer_ip = '192.0.2.101'\n      AND is_withdrawn = FALSE\n    ORDER BY prefix, time DESC\n) r2 ON r1.prefix = r2.prefix\nWHERE r1.as_path != r2.as_path\nLIMIT 100;\n</code></pre>"},{"location":"queries/#exporting-data","title":"Exporting Data","text":""},{"location":"queries/#csv-export","title":"CSV Export","text":"<pre><code>-- Export to CSV\n\\copy (SELECT * FROM route_updates WHERE time &gt; NOW() - INTERVAL '1 day') TO '/tmp/routes.csv' WITH CSV HEADER;\n</code></pre>"},{"location":"queries/#json-export","title":"JSON Export","text":"<pre><code>-- Export as JSON\n\\copy (SELECT row_to_json(t) FROM (SELECT * FROM route_updates WHERE time &gt; NOW() - INTERVAL '1 day') t) TO '/tmp/routes.json';\n</code></pre>"},{"location":"queries/#query-optimization-tips","title":"Query Optimization Tips","text":""},{"location":"queries/#1-use-time-filters","title":"1. Use Time Filters","text":"<p>Always filter by time for large tables:</p> <pre><code>-- Good\nSELECT * FROM route_updates\nWHERE time &gt; NOW() - INTERVAL '1 day';\n\n-- Bad (scans entire table)\nSELECT * FROM route_updates;\n</code></pre>"},{"location":"queries/#2-use-distinct-on-for-latest-state","title":"2. Use DISTINCT ON for Latest State","text":"<pre><code>-- Efficient way to get current routes\nSELECT DISTINCT ON (prefix)\n    prefix, next_hop, time\nFROM route_updates\nORDER BY prefix, time DESC;\n</code></pre>"},{"location":"queries/#3-leverage-indexes","title":"3. Leverage Indexes","text":"<p>Indexes exist on: - <code>prefix</code> (GIN index for fast CIDR lookups) - <code>family</code> + <code>time</code> (composite index) - <code>bmp_peer_ip</code> + <code>time</code> - <code>bgp_peer_ip</code> + <code>time</code> - <code>as_path</code> (GIN index for ANY queries)</p>"},{"location":"queries/#4-use-timescaledb-functions","title":"4. Use TimescaleDB Functions","text":"<pre><code>-- Time bucketing for aggregations\nSELECT\n    time_bucket('1 hour', time) as hour,\n    COUNT(*)\nFROM route_updates\nGROUP BY hour;\n</code></pre>"},{"location":"queries/#5-explain-your-queries","title":"5. EXPLAIN Your Queries","text":"<pre><code>EXPLAIN ANALYZE\nSELECT * FROM route_updates\nWHERE prefix &lt;&lt;= '10.0.0.0/8'\n  AND time &gt; NOW() - INTERVAL '1 day';\n</code></pre>"},{"location":"queries/#next-steps","title":"Next Steps","text":"<ul> <li>Configuration: Optimize database settings</li> <li>Troubleshooting: Performance troubleshooting</li> <li>Logging: Correlate logs with query results</li> </ul>"},{"location":"sentry/","title":"Sentry Integration","text":"<p>This document explains how to configure and use Sentry for error tracking and monitoring in pybmpmon.</p>"},{"location":"sentry/#overview","title":"Overview","text":"<p>Sentry integration provides: - Automatic error tracking: All ERROR level logs are sent to Sentry - Peer event tracking: BMP peer up/down events with full context - Parse error tracking: BMP and BGP parse errors with message data - Route processing errors: Database and processing errors with context - Contextual information: Peer IPs, message types, error details</p>"},{"location":"sentry/#configuration","title":"Configuration","text":""},{"location":"sentry/#enable-sentry","title":"Enable Sentry","text":"<p>Add the following to your <code>.env</code> file:</p> <pre><code># Required: Sentry DSN (get from Sentry.io project settings)\nSENTRY_DSN=https://examplePublicKey@o0.ingest.sentry.io/0\n\n# Optional: Environment name (default: development)\nSENTRY_ENVIRONMENT=production\n\n# Optional: Traces sample rate (0.0 to 1.0, default: 0.1)\nSENTRY_TRACES_SAMPLE_RATE=0.1\n</code></pre>"},{"location":"sentry/#disable-sentry","title":"Disable Sentry","text":"<p>To disable Sentry, simply leave <code>SENTRY_DSN</code> empty or unset:</p> <pre><code># Sentry disabled\nSENTRY_DSN=\n</code></pre> <p>Or remove the line entirely from <code>.env</code>.</p>"},{"location":"sentry/#sentry-events","title":"Sentry Events","text":""},{"location":"sentry/#peer-up-events","title":"Peer Up Events","text":"<p>When a BMP peer establishes a session:</p> <pre><code>{\n  \"level\": \"info\",\n  \"message\": \"BMP peer 192.0.2.1 established session with BGP peer 192.0.2.100 (AS65001)\",\n  \"tags\": {\n    \"event_type\": \"peer_up\",\n    \"peer_ip\": \"192.0.2.1\"\n  },\n  \"contexts\": {\n    \"bmp_peer\": {\n      \"peer_ip\": \"192.0.2.1\",\n      \"bgp_peer\": \"192.0.2.100\",\n      \"bgp_peer_asn\": 65001\n    }\n  }\n}\n</code></pre>"},{"location":"sentry/#peer-down-events","title":"Peer Down Events","text":"<p>When a BMP peer disconnects:</p> <pre><code>{\n  \"level\": \"warning\",\n  \"message\": \"BMP peer 192.0.2.1 disconnected (reason code: 1)\",\n  \"tags\": {\n    \"event_type\": \"peer_down\",\n    \"peer_ip\": \"192.0.2.1\"\n  },\n  \"contexts\": {\n    \"bmp_peer\": {\n      \"peer_ip\": \"192.0.2.1\",\n      \"reason_code\": 1\n    }\n  }\n}\n</code></pre>"},{"location":"sentry/#parse-errors","title":"Parse Errors","text":"<p>When BMP or BGP message parsing fails:</p> <pre><code>{\n  \"level\": \"error\",\n  \"message\": \"bmp_parse_error: Invalid BMP version from 192.0.2.1\",\n  \"tags\": {\n    \"error_type\": \"bmp_parse_error\",\n    \"peer_ip\": \"192.0.2.1\"\n  },\n  \"contexts\": {\n    \"parse_error\": {\n      \"peer_ip\": \"192.0.2.1\",\n      \"error_message\": \"Invalid BMP version: expected 3, got 2\",\n      \"data_hex\": \"02000000060400...\"\n    }\n  },\n  \"exception\": {\n    \"type\": \"BMPParseError\",\n    \"value\": \"Invalid BMP version: expected 3, got 2\"\n  }\n}\n</code></pre>"},{"location":"sentry/#route-processing-errors","title":"Route Processing Errors","text":"<p>When route processing fails:</p> <pre><code>{\n  \"level\": \"error\",\n  \"message\": \"Route processing error from 192.0.2.1: Database connection failed\",\n  \"tags\": {\n    \"error_type\": \"route_processing_error\",\n    \"peer_ip\": \"192.0.2.1\"\n  },\n  \"contexts\": {\n    \"route_processing\": {\n      \"peer_ip\": \"192.0.2.1\",\n      \"error_message\": \"Database connection failed\",\n      \"route_count\": 1000\n    }\n  }\n}\n</code></pre>"},{"location":"sentry/#sentry-dashboard-usage","title":"Sentry Dashboard Usage","text":""},{"location":"sentry/#filtering-events","title":"Filtering Events","text":"<p>Use tags to filter events in Sentry:</p> <ul> <li>By event type: <code>event_type:peer_up</code> or <code>event_type:peer_down</code></li> <li>By peer: <code>peer_ip:192.0.2.1</code></li> <li>By error type: <code>error_type:bmp_parse_error</code></li> </ul>"},{"location":"sentry/#viewing-context","title":"Viewing Context","text":"<p>Click on any event to view full context: - bmp_peer: Peer connection details - parse_error: Error details with hex dump - route_processing: Processing details and route counts</p>"},{"location":"sentry/#setting-up-alerts","title":"Setting Up Alerts","text":"<p>Create alerts in Sentry for:</p> <ol> <li>High error rates: Alert when parse errors exceed threshold</li> <li>Peer instability: Alert when peer down events are frequent</li> <li>Route processing failures: Alert on database errors</li> </ol> <p>Example alert configuration: <pre><code>When event.count in bmp_parse_error\nis greater than 100\nin 5 minutes\nthen send notification to #alerts\n</code></pre></p>"},{"location":"sentry/#integration-with-logging","title":"Integration with Logging","text":"<p>Sentry integrates with the logging system: - INFO logs: Sent to Sentry but not created as issues - ERROR logs: Automatically create Sentry issues - Context preservation: All structured log fields are included</p> <p>All events are also logged to stdout as JSON, so you have both: - Sentry: For error tracking and alerting - Logs: For full audit trail and debugging</p>"},{"location":"sentry/#performance-impact","title":"Performance Impact","text":"<p>Sentry integration has minimal performance impact: - Async sending: Events are sent asynchronously - Sampling: Traces are sampled (default 10%) - No blocking: Logging continues even if Sentry is unavailable - Graceful degradation: Application works normally if Sentry is disabled</p>"},{"location":"sentry/#troubleshooting","title":"Troubleshooting","text":""},{"location":"sentry/#sentry-sdk-not-installed","title":"Sentry SDK Not Installed","text":"<p>If you see this warning: <pre><code>sentry_sdk_not_installed\n</code></pre></p> <p>Install the Sentry SDK: <pre><code>poetry add sentry-sdk\n</code></pre></p>"},{"location":"sentry/#invalid-dsn","title":"Invalid DSN","text":"<p>If Sentry initialization fails, verify your DSN: <pre><code># Check DSN format\necho $SENTRY_DSN\n# Should be: https://KEY@o0.ingest.sentry.io/PROJECT_ID\n</code></pre></p>"},{"location":"sentry/#no-events-in-sentry","title":"No Events in Sentry","text":"<p>Check: 1. DSN is set: <code>echo $SENTRY_DSN</code> 2. Application started: Check logs for <code>sentry_initialized</code> 3. Error level: Only ERROR level logs create issues 4. Network connectivity: Ensure outbound HTTPS to sentry.io</p>"},{"location":"sentry/#too-many-events","title":"Too Many Events","text":"<p>Reduce event volume by: 1. Filtering: Set log level to ERROR only in production 2. Sampling: Reduce <code>SENTRY_TRACES_SAMPLE_RATE</code> 3. Fingerprinting: Group similar errors in Sentry settings</p>"},{"location":"sentry/#best-practices","title":"Best Practices","text":"<ol> <li>Use different environments: Set <code>SENTRY_ENVIRONMENT</code> per deployment</li> <li>Monitor quota: Check Sentry quota usage regularly</li> <li>Set up alerts: Configure alerts for critical errors</li> <li>Review events: Regularly review and resolve Sentry issues</li> <li>Release tracking: Tag releases in Sentry for better tracking</li> </ol>"},{"location":"sentry/#example-env-configuration","title":"Example <code>.env</code> Configuration","text":""},{"location":"sentry/#development","title":"Development","text":"<pre><code>SENTRY_DSN=https://key@sentry.io/dev-project\nSENTRY_ENVIRONMENT=development\nSENTRY_TRACES_SAMPLE_RATE=1.0  # Sample everything in dev\nLOG_LEVEL=DEBUG\n</code></pre>"},{"location":"sentry/#staging","title":"Staging","text":"<pre><code>SENTRY_DSN=https://key@sentry.io/staging-project\nSENTRY_ENVIRONMENT=staging\nSENTRY_TRACES_SAMPLE_RATE=0.5  # Sample 50%\nLOG_LEVEL=INFO\n</code></pre>"},{"location":"sentry/#production","title":"Production","text":"<pre><code>SENTRY_DSN=https://key@sentry.io/prod-project\nSENTRY_ENVIRONMENT=production\nSENTRY_TRACES_SAMPLE_RATE=0.1  # Sample 10%\nLOG_LEVEL=INFO\n</code></pre>"},{"location":"sentry/#privacy-considerations","title":"Privacy Considerations","text":"<p>Sentry captures: - Error messages: Full exception details - Message data: First 512 characters of hex dumps - IP addresses: Peer IPs and connection details - Stack traces: Full Python stack traces</p> <p>Do not include: - Passwords or secrets in log messages - Sensitive customer data - Full routing table dumps (truncated automatically)</p>"},{"location":"sentry/#further-reading","title":"Further Reading","text":"<ul> <li>Sentry Documentation</li> <li>Python SDK</li> <li>Performance Monitoring</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>This guide covers common issues and their solutions when running pybmpmon.</p>"},{"location":"troubleshooting/#quick-diagnostics","title":"Quick Diagnostics","text":""},{"location":"troubleshooting/#check-service-health","title":"Check Service Health","text":"<pre><code># Check if services are running\ndocker-compose ps\n\n# Check BMP port\nnc -z localhost 11019 &amp;&amp; echo \"BMP port OK\" || echo \"BMP port FAILED\"\n\n# Check database\ndocker-compose exec postgres pg_isready\n\n# View recent logs\ndocker-compose logs --tail=100 pybmpmon\n\n# Check for errors\ndocker-compose logs pybmpmon | grep -i error\n</code></pre>"},{"location":"troubleshooting/#common-log-messages","title":"Common Log Messages","text":"<p>Successful startup: <pre><code>{\"event\": \"bmp_listener_started\", \"level\": \"INFO\", \"host\": \"0.0.0.0\", \"port\": 11019}\n{\"event\": \"sentry_initialized\", \"level\": \"INFO\", \"environment\": \"production\"}\n</code></pre></p> <p>Router connected: <pre><code>{\"event\": \"peer_connected\", \"level\": \"INFO\", \"peer\": \"192.0.2.1\"}\n</code></pre></p> <p>Routes being processed: <pre><code>{\"event\": \"route_stats\", \"level\": \"INFO\", \"peer\": \"192.0.2.1\", \"received\": 1523, \"processed\": 1520}\n</code></pre></p>"},{"location":"troubleshooting/#installation-issues","title":"Installation Issues","text":""},{"location":"troubleshooting/#docker-compose-wont-start","title":"Docker Compose Won't Start","text":"<p>Symptom: <code>docker-compose up</code> fails</p> <p>Causes and Solutions:</p> <ol> <li> <p>Missing .env file <pre><code># Error: \"DATABASE_PASSWORD is not set\"\n# Solution: Create .env file\ncp .env.example .env\nvim .env  # Edit with your settings\n</code></pre></p> </li> <li> <p>Port already in use <pre><code># Error: \"bind: address already in use\"\n# Check what's using port 11019\nlsof -i :11019\n# Kill the process or change BMP_LISTEN_PORT in .env\n</code></pre></p> </li> <li> <p>Insufficient permissions <pre><code># Error: \"Permission denied\"\n# Solution: Add user to docker group\nsudo usermod -aG docker $USER\n# Log out and back in\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#container-exits-immediately","title":"Container Exits Immediately","text":"<p>Symptom: <code>docker-compose ps</code> shows exited container</p> <p>Diagnosis: <pre><code># View exit logs\ndocker-compose logs pybmpmon\n\n# Common causes:\n# - Configuration error\n# - Database connection failure\n# - Python import error\n</code></pre></p> <p>Solutions:</p> <ol> <li> <p>Configuration validation failed <pre><code># Check configuration\ndocker-compose run --rm pybmpmon python -c \"from pybmpmon.config import settings; print(settings)\"\n</code></pre></p> </li> <li> <p>Database not ready <pre><code># Wait for database to start\ndocker-compose up -d postgres\nsleep 10\ndocker-compose up -d pybmpmon\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#database-issues","title":"Database Issues","text":""},{"location":"troubleshooting/#cannot-connect-to-database","title":"Cannot Connect to Database","text":"<p>Symptom: <code>ConnectionRefusedError</code> or timeout</p> <p>Diagnosis: <pre><code># Check if PostgreSQL is running\ndocker-compose ps postgres\n\n# Check database logs\ndocker-compose logs postgres\n\n# Test connection\ndocker-compose exec postgres psql -U bmpmon -d bmpmon\n</code></pre></p> <p>Solutions:</p> <ol> <li> <p>Database not started <pre><code>docker-compose up -d postgres\n</code></pre></p> </li> <li> <p>Wrong credentials <pre><code># Verify credentials in .env match database\ndocker-compose exec postgres psql -U bmpmon -d bmpmon\n# If fails, reset password:\ndocker-compose exec postgres psql -U postgres -c \"ALTER USER bmpmon WITH PASSWORD 'newpassword';\"\n</code></pre></p> </li> <li> <p>Network issue <pre><code># Verify containers on same network\ndocker network inspect pybmpmon_default\n\n# Test connectivity\ndocker-compose exec pybmpmon ping postgres\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#database-schema-not-created","title":"Database Schema Not Created","text":"<p>Symptom: <code>relation \"route_updates\" does not exist</code></p> <p>Solution: <pre><code># Run database initialization\ndocker-compose exec postgres psql -U bmpmon -d bmpmon -f /docker-entrypoint-initdb.d/01_init.sql\n\n# Or recreate database\ndocker-compose down -v\ndocker-compose up -d\n</code></pre></p>"},{"location":"troubleshooting/#database-fills-up-disk","title":"Database Fills Up Disk","text":"<p>Symptom: <code>No space left on device</code></p> <p>Diagnosis: <pre><code># Check database size\ndocker-compose exec postgres psql -U bmpmon -d bmpmon -c \"\nSELECT pg_size_pretty(pg_database_size('bmpmon'));\n\"\n\n# Check table sizes\ndocker-compose exec postgres psql -U bmpmon -d bmpmon -c \"\nSELECT tablename, pg_size_pretty(pg_total_relation_size(tablename::text))\nFROM pg_tables WHERE schemaname = 'public';\n\"\n\n# Check disk usage\ndocker-compose exec postgres df -h\n</code></pre></p> <p>Solutions:</p> <ol> <li> <p>Enable compression (if not already enabled)    <pre><code>-- Compress data older than 30 days\nSELECT add_compression_policy('route_updates', INTERVAL '30 days');\n</code></pre></p> </li> <li> <p>Reduce retention <pre><code>-- Change retention from 5 years to 1 year\nSELECT remove_retention_policy('route_updates');\nSELECT add_retention_policy('route_updates', INTERVAL '1 year');\n</code></pre></p> </li> <li> <p>Vacuum database <pre><code>docker-compose exec postgres vacuumdb -U bmpmon -d bmpmon --analyze --verbose\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#bmp-listener-issues","title":"BMP Listener Issues","text":""},{"location":"troubleshooting/#bmp-port-not-accessible","title":"BMP Port Not Accessible","text":"<p>Symptom: Routers can't connect to port 11019</p> <p>Diagnosis: <pre><code># Check if port is listening\nnc -z localhost 11019\n\n# Check from remote host\nnc -z &lt;pybmpmon-ip&gt; 11019\n\n# View firewall rules (Linux)\nsudo iptables -L -n | grep 11019\n</code></pre></p> <p>Solutions:</p> <ol> <li> <p>Firewall blocking <pre><code># Allow BMP port (Linux)\nsudo iptables -A INPUT -p tcp --dport 11019 -j ACCEPT\n\n# Allow BMP port (macOS)\n# Add rule in System Preferences &gt; Security &amp; Privacy &gt; Firewall\n</code></pre></p> </li> <li> <p>Docker port mapping issue <pre><code># Verify port mapping in docker-compose.yml\nports:\n  - \"11019:11019\"\n\n# Check actual port mapping\ndocker port pybmpmon\n</code></pre></p> </li> <li> <p>Listening on wrong interface <pre><code># Ensure BMP_LISTEN_HOST=0.0.0.0 in .env\n# Not 127.0.0.1 (localhost only)\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#no-routes-received","title":"No Routes Received","text":"<p>Symptom: Database empty after router connects</p> <p>Diagnosis: <pre><code># Check if peer connected\ndocker-compose exec postgres psql -U bmpmon -d bmpmon -c \"SELECT * FROM bmp_peers;\"\n\n# Check for route updates\ndocker-compose exec postgres psql -U bmpmon -d bmpmon -c \"SELECT COUNT(*) FROM route_updates;\"\n\n# View DEBUG logs\n# Set LOG_LEVEL=DEBUG in .env and restart\ndocker-compose logs -f pybmpmon\n</code></pre></p> <p>Solutions:</p> <ol> <li>Router not configured correctly</li> <li>Verify BMP configuration on router</li> <li>Check router logs for BMP connection status</li> <li> <p>Ensure router is sending route-monitoring messages</p> </li> <li> <p>Parse errors <pre><code># Check for parse errors in logs\ndocker-compose logs pybmpmon | grep -i \"parse_error\"\n\n# View error details in DEBUG mode\n# Set LOG_LEVEL=DEBUG in .env\n</code></pre></p> </li> <li> <p>Batch writer not flushing <pre><code># Routes may be buffered, wait 10 seconds\n# Or check batch writer stats in logs\ndocker-compose logs pybmpmon | grep batch\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"troubleshooting/#high-cpu-usage","title":"High CPU Usage","text":"<p>Symptom: Container using 100% CPU</p> <p>Diagnosis: <pre><code># Monitor CPU usage\ndocker stats pybmpmon\n\n# Check route throughput in logs\ndocker-compose logs pybmpmon | grep route_stats\n</code></pre></p> <p>Solutions:</p> <ol> <li> <p>Too many concurrent connections <pre><code># Check number of BMP peers\ndocker-compose exec postgres psql -U bmpmon -d bmpmon -c \"SELECT COUNT(*) FROM bmp_peers WHERE is_active = TRUE;\"\n\n# Limit BMP peers if necessary\n</code></pre></p> </li> <li> <p>DEBUG logging overhead <pre><code># Change LOG_LEVEL to INFO in .env\nLOG_LEVEL=INFO\ndocker-compose restart pybmpmon\n</code></pre></p> </li> <li> <p>Slow database writes <pre><code># Check database performance\ndocker stats postgres\n\n# Increase connection pool\nDATABASE_POOL_MAX_SIZE=20  # in .env\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#high-memory-usage","title":"High Memory Usage","text":"<p>Symptom: Container using excessive RAM</p> <p>Diagnosis: <pre><code># Monitor memory usage\ndocker stats pybmpmon\n\n# Check for memory leaks\n# Restart and monitor growth over time\ndocker-compose restart pybmpmon\nwatch docker stats pybmpmon\n</code></pre></p> <p>Solutions:</p> <ol> <li> <p>Large batches <pre><code># Reduce batch size in code (default: 1000 routes)\n# Or reduce batch timeout (default: 500ms)\n</code></pre></p> </li> <li> <p>Too many database connections <pre><code># Reduce connection pool in .env\nDATABASE_POOL_MAX_SIZE=5\ndocker-compose restart pybmpmon\n</code></pre></p> </li> <li> <p>Memory leak <pre><code># Restart service periodically (workaround)\n# Report issue with reproduction steps\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#slow-route-processing","title":"Slow Route Processing","text":"<p>Symptom: Routes/second much lower than expected</p> <p>Diagnosis: <pre><code># Check throughput in logs (every 10 seconds)\ndocker-compose logs pybmpmon | grep route_stats\n\n# Expected: throughput_per_sec &gt; 1500\n\n# Check database write latency\ndocker-compose exec postgres psql -U bmpmon -d bmpmon -c \"\nSELECT query, mean_exec_time, calls\nFROM pg_stat_statements\nORDER BY mean_exec_time DESC\nLIMIT 10;\n\"\n</code></pre></p> <p>Solutions:</p> <ol> <li> <p>Database I/O bottleneck <pre><code># Use SSD for database volume\n# Increase PostgreSQL shared_buffers\n# Add more RAM to database host\n</code></pre></p> </li> <li> <p>Network latency <pre><code># Measure network latency to database\ndocker-compose exec pybmpmon ping postgres\n\n# Use local database instead of remote\n</code></pre></p> </li> <li> <p>Too many indexes <pre><code>-- Remove unused indexes\n-- Check index usage\nSELECT * FROM pg_stat_user_indexes WHERE idx_scan = 0;\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#logging-issues","title":"Logging Issues","text":""},{"location":"troubleshooting/#no-logs-appearing","title":"No Logs Appearing","text":"<p>Symptom: <code>docker-compose logs</code> shows nothing</p> <p>Diagnosis: <pre><code># Check if container is running\ndocker-compose ps\n\n# Check log level\necho $LOG_LEVEL\n\n# Try running in foreground\ndocker-compose up pybmpmon\n</code></pre></p> <p>Solutions:</p> <ol> <li> <p>Container not running <pre><code>docker-compose up -d pybmpmon\n</code></pre></p> </li> <li> <p>Logs being sent elsewhere <pre><code># Check Docker logging driver\ndocker inspect pybmpmon | grep LogConfig\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#logs-too-verbose-debug-mode","title":"Logs Too Verbose (DEBUG Mode)","text":"<p>Symptom: Huge log files with hex dumps</p> <p>Solution: <pre><code># Change LOG_LEVEL to INFO in .env\nLOG_LEVEL=INFO\ndocker-compose restart pybmpmon\n\n# Rotate logs\ndocker-compose logs --tail=1000 pybmpmon &gt; last_1000.log\n</code></pre></p>"},{"location":"troubleshooting/#sentry-not-receiving-events","title":"Sentry Not Receiving Events","text":"<p>Symptom: No events in Sentry dashboard</p> <p>Diagnosis: <pre><code># Check Sentry initialization\ndocker-compose logs pybmpmon | grep sentry_initialized\n\n# Verify DSN is set\ndocker-compose exec pybmpmon env | grep SENTRY_DSN\n\n# Test network connectivity\ndocker-compose exec pybmpmon curl -I https://sentry.io\n</code></pre></p> <p>Solutions:</p> <ol> <li> <p>Sentry not initialized <pre><code># Verify SENTRY_DSN in .env\n# Must be valid DSN, not empty\nSENTRY_DSN=https://key@o0.ingest.sentry.io/123456\n</code></pre></p> </li> <li> <p>Sentry SDK not installed <pre><code># Rebuild image\ndocker-compose build --no-cache pybmpmon\ndocker-compose up -d pybmpmon\n</code></pre></p> </li> <li> <p>Network firewall <pre><code># Allow HTTPS to *.sentry.io\ndocker-compose exec pybmpmon curl -v https://sentry.io\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#router-compatibility-issues","title":"Router Compatibility Issues","text":""},{"location":"troubleshooting/#cisco-ios-xr","title":"Cisco IOS-XR","text":"<p>Issue: Router doesn't send routes</p> <p>Solution: <pre><code>! Ensure route-monitoring is configured\nbmp server 1\n update-source Loopback0\n\nrouter bgp 65000\n bmp server 1\n  activate\n  route-monitoring pre-policy  ! Important\n</code></pre></p>"},{"location":"troubleshooting/#juniper-junos","title":"Juniper Junos","text":"<p>Issue: Connection established but no routes</p> <p>Solution: <pre><code>! Enable route monitoring\nset routing-options bmp station pybmpmon route-monitoring pre-policy\ncommit and-quit\n</code></pre></p>"},{"location":"troubleshooting/#arista-eos","title":"Arista EOS","text":"<p>Issue: BMP session flapping</p> <p>Solution: <pre><code>! Increase hold timers\nrouter bgp 65000\n   bmp server pybmpmon\n      tcp keepalive idle 120 interval 60 probes 3\n</code></pre></p>"},{"location":"troubleshooting/#data-integrity-issues","title":"Data Integrity Issues","text":""},{"location":"troubleshooting/#duplicate-routes","title":"Duplicate Routes","text":"<p>Symptom: Same prefix appears multiple times with same timestamp</p> <p>Diagnosis: <pre><code>SELECT prefix, time, COUNT(*)\nFROM route_updates\nGROUP BY prefix, time\nHAVING COUNT(*) &gt; 1;\n</code></pre></p> <p>Cause: This is expected - denormalized storage stores every route update</p> <p>Solution: Use <code>DISTINCT ON</code> queries to get latest state (see Queries)</p>"},{"location":"troubleshooting/#missing-routes","title":"Missing Routes","text":"<p>Symptom: Routes missing that should be present</p> <p>Diagnosis: <pre><code># Check for parse errors\ndocker-compose logs pybmpmon | grep parse_error\n\n# Check database capacity\ndocker-compose exec postgres df -h\n\n# Verify router is sending routes\n# Check router BMP statistics\n</code></pre></p> <p>Solutions:</p> <ol> <li>Parse errors: Report issue with DEBUG logs</li> <li>Database full: Free up space or increase retention policy</li> <li>Router not sending: Check router BMP configuration</li> </ol>"},{"location":"troubleshooting/#backup-and-recovery","title":"Backup and Recovery","text":""},{"location":"troubleshooting/#restore-from-backup","title":"Restore from Backup","text":"<pre><code># Stop application\ndocker-compose stop pybmpmon\n\n# Restore database\ndocker-compose exec postgres pg_restore \\\n  -U bmpmon -d bmpmon \\\n  --clean \\\n  /path/to/backup.dump\n\n# Restart application\ndocker-compose start pybmpmon\n</code></pre>"},{"location":"troubleshooting/#emergency-database-reset","title":"Emergency Database Reset","text":"<p>Data Loss Warning</p> <p>This will delete all data. Only use as last resort.</p> <pre><code># Stop services\ndocker-compose down\n\n# Remove volumes\ndocker-compose down -v\n\n# Restart (will recreate database)\ndocker-compose up -d\n</code></pre>"},{"location":"troubleshooting/#getting-help","title":"Getting Help","text":""},{"location":"troubleshooting/#collect-diagnostic-information","title":"Collect Diagnostic Information","text":"<p>Before reporting issues, collect:</p> <ol> <li> <p>Version information <pre><code>docker-compose exec pybmpmon python -c \"from pybmpmon import __version__; print(__version__)\"\n</code></pre></p> </li> <li> <p>Configuration (redact passwords) <pre><code>docker-compose config\n</code></pre></p> </li> <li> <p>Logs <pre><code>docker-compose logs --tail=500 pybmpmon &gt; logs.txt\ndocker-compose logs --tail=500 postgres &gt;&gt; logs.txt\n</code></pre></p> </li> <li> <p>System information <pre><code>docker version\ndocker-compose version\nuname -a\ndf -h\nfree -m\n</code></pre></p> </li> <li> <p>Database stats <pre><code>docker-compose exec postgres psql -U bmpmon -d bmpmon -c \"\nSELECT\n  (SELECT COUNT(*) FROM route_updates) as total_routes,\n  (SELECT COUNT(*) FROM bmp_peers WHERE is_active=TRUE) as active_peers,\n  (SELECT pg_size_pretty(pg_database_size('bmpmon'))) as db_size;\n\"\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#report-issues","title":"Report Issues","text":"<p>Include in issue reports:</p> <ul> <li>Description of problem</li> <li>Steps to reproduce</li> <li>Expected vs actual behavior</li> <li>Diagnostic information (above)</li> <li>Relevant log snippets</li> <li>Router vendor and OS version</li> </ul>"},{"location":"troubleshooting/#next-steps","title":"Next Steps","text":"<ul> <li>Configuration: Adjust settings</li> <li>Queries: Verify data with SQL</li> <li>Logging: Understand log messages</li> <li>Sentry: Configure error tracking</li> </ul>"}]}